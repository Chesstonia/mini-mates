<!DOCTYPE html>
<html data-ng-app="myApp">
	<head>
		<title><%- title %></title>

		<!-- Viewport mobile tag for sensible mobile support -->
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <!--
        Stylesheets and Preprocessors
        ==============================
        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <script src="http://localhost:35729/livereload.js"></script>
    
	</head>

	<body>
		<%- body %>

		<!--
        Client-side Templates
        ========================
        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.
        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
      Client-side Javascript
      ========================
      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript
    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/chess.min.js"></script>
    <script src="/js/dependencies/chessground.js"></script>
    <script src="/js/dependencies/jquery-2.2.3.js"></script>
    <script src="/js/mater.js"></script>
    <script src="/js/mini-mates.js"></script>
    <!--SCRIPTS END-->
	</body>
</html>

<!--
	<html data-ng-app="myApp">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <link rel="stylesheet" href="../styles/importer.css">
    <link rel="stylesheet" href="./script/chessboard.js/css/chessboard-0.3.0.css">

    <script type="text/javascript" src="script/jquery/jquery-2.2.3.js"></script>
    <script type="text/javascript" src="script/mater.js"></script>
  </head>
  <body>
    <script src="../chessground.js"></script>
    <script src="chess.min.js"></script>

    <section>
    	<div data-ng-controller="SimpleController">
    	  <div class="info">{{color}} to move</div>
    	  <div class="info">Correct: {{correctCount}}</div>
    	  <div class="info">Incorrect: {{incorrectCount}}</div>
    	  <div class="info">Puzzles until bonus: {{puzzlesNeeded}}</div>
    	  <div class="info">{{timerValue}} seconds left</div>
    	  <button data-ng-click="initialize()">Reset</button>
    	</div>
    </section>
        <script type="text/javascript" src="script/angular.js"></script>
        <script type="text/javascript" src="script/mini-mates.js"></script>
  </body>
</html>

-->